# Author: Jiakai Zhu
# CSCI 291: Computational Creativity
# Music Improvisor Project
# Date: 2022 Feb 3
# File description:
#   Generate melody based on a markov chain trained on the melody and chord progression a
#   set of 475 popular music from the past century
#   The melody will be in C major or A natural minor
#   The range of the notes will be the octave C4-B4 (alto range)
#   Meant to be used in conjunction with pauls_melody/markov.py
# Requirement:
#   prob.pickle file generated by pauls_melody/markov

from music21 import note, stream
import pickle
import random
import time

with open('pauls_melody/prob.pickle', 'rb') as handle:
    prob = pickle.load(handle)


# Function description:
#   Generate the next note based on the probability matrix
# Input: Note duple: (interval,duration)
# Output: Note duple: (interval,duration)


@staticmethod
def get_note(curr):
    random.seed(time.time())
    total = 0.0
    random_num = random.random()
    for i in prob[curr].keys():
        total = total + prob[curr][i]
        if total >= random_num:
            return i


# Function description:
#   Generate the next note based on the probability matrix
# Input:
#   Chord progression as a string list
#   Beats: number of beats in the array
# Output:
#   File: Midi_outputs/melody.midi
#   Music21.stream: returned melody as a music21 stream


def Paul_melody(cp, beats):
    s = stream.Stream()
    scale = ['A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4']
    subdivision = 0.25
    total_beats = 0.0
    chord_root = cp[0][0]
    note_sustain = 0.0
    curr_note = (0, 0)

    while total_beats < beats:
        if total_beats % 4 == 0.0:
            chord_root = ord(cp[int(total_beats/4)][0]) - ord('A')
        if note_sustain == 0.0:
            curr_note = get_note(curr_note)
            note_sustain = curr_note[1]
            if curr_note[0] == 0:
                n = note.Rest(quarterlength=note_sustain)
            else:
                note_pitch = scale[(chord_root + (curr_note[0]-1)) % 7]
                n = note.Note(note_pitch, quarterLength=note_sustain)
            s.append(n)

        note_sustain -= subdivision
        total_beats += subdivision

    file = 'Midi_outputs/melody.midi'
    s.write('midi', fp=file)
    return s
